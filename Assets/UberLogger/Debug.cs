// <auto-generated/>
using UnityEngine;
using UberLogger;

public static class Debug
{
    /// <summary>
    /// Enable/Disable log.
    /// </summary>
    public static bool IsLogEnabled { get; set; }

    static Debug()
    {
        IsLogEnabled = true;
    }

    //Unity replacement methods
    public static void DrawRay(Vector3 start, Vector3 dir, Color? color=null, float duration = 0.0f, bool depthTest = true)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        var col = color ?? Color.white;
        UnityEngine.Debug.DrawRay(start, dir, col, duration, depthTest);
    }

    public static void DrawLine(Vector3 start, Vector3 end, Color? color=null, float duration = 0.0f, bool depthTest = true)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        var col = color ?? Color.white;
        UnityEngine.Debug.DrawLine(start, end, col, duration, depthTest);
    }

    public static void Break()
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.Break();
    }

#if UNITY_5
    public static void Assert(bool condition)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.Assert(condition);
    }

    public static void Assert(bool condition, string message)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.Assert(condition, message);
    }

    public static void Assert(bool condition, string format, params object[] args)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.AssertFormat(condition, format, args);
    }

    public static void ClearDeveloperConsole()
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.ClearDeveloperConsole();
    }
#endif

    [StackTraceIgnore]
    public static void LogFormat(UnityEngine.Object context, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Message, message, par);
    }

    [StackTraceIgnore]
    public static void LogFormat(string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", null, LogSeverity.Message, message, par);
    }

    [StackTraceIgnore]
    public static void Log(object message, UnityEngine.Object context = null)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Message, message);
    }

    [StackTraceIgnore]
    public static void LogErrorFormat(UnityEngine.Object context, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Error, message, par);
    }

    [StackTraceIgnore]
    public static void LogErrorFormat(string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", null, LogSeverity.Error, message, par);
    }

    [StackTraceIgnore]
    public static void LogError(object message, UnityEngine.Object context = null)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Error, message);
    }

    [StackTraceIgnore]
    public static void LogWarningFormat(UnityEngine.Object context, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void LogWarningFormat(string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", null, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void LogWarning(object message, UnityEngine.Object context = null)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Warning, message);
    }

    // New methods
    [StackTraceIgnore]
    public static void ULog(UnityEngine.Object context, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void ULog(string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", null, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void ULogChannel(UnityEngine.Object context, string channel, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log(channel, context, LogSeverity.Message, message, par);
    }

    [StackTraceIgnore]
    public static void ULogChannel(string channel, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log(channel, null, LogSeverity.Message, message, par);
    }


    [StackTraceIgnore]
    public static void ULogWarning(UnityEngine.Object context, object message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void ULogWarning(object message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", null, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void ULogWarningChannel(UnityEngine.Object context, string channel, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log(channel, context, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void ULogWarningChannel(string channel, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log(channel, null, LogSeverity.Warning, message, par);
    }

    [StackTraceIgnore]
    public static void ULogError(UnityEngine.Object context, object message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", context, LogSeverity.Error, message, par);
    }

    [StackTraceIgnore]
    public static void ULogError(object message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log("", null, LogSeverity.Error, message, par);
    }

    [StackTraceIgnore]
    public static void ULogErrorChannel(UnityEngine.Object context, string channel, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log(channel, context, LogSeverity.Error, message, par);
    }

    [StackTraceIgnore]
    public static void ULogErrorChannel(string channel, string message, params object[] par)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UberLogger.Logger.Log(channel, null, LogSeverity.Error, message, par);
    }


    //Logs that will not be caught by UberLogger
    //Useful for debugging UberLogger
    [LogUnityOnly]
    public static void UnityLog(object message)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.Log(message);
    }

    [LogUnityOnly]
    public static void UnityLogWarning(object message)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.LogWarning(message);
    }

    [LogUnityOnly]
    public static void UnityLogError(object message)
    {
        if (IsLogEnabled == false)
        {
            return;
        }

        UnityEngine.Debug.LogError(message);
    }
}
